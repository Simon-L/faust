name: libfaust

env:
  FAUST_VERSION: 2.74.3
  FAUSTGEN_VERSION: "1.71"   
  LLVM_PACKAGE_VERSION: "15.0.7"
  CMAKE_OSX_DEPLOYMENT_TARGET: "10.15"
  LLVM_COMMIT: 8dfdcc7b7bf66834a761bd8de445840ef68e4d1a

# Controls when the action will run.
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_call:

  workflow_dispatch:
    inputs:
      do-build-windows:
        type: boolean
        default: false
      do-build-macos:
        type: boolean
        default: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-windows:
    if: ${{ inputs.do-build-windows }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: win64
            os: windows-2022
            llvm-url: https://github.com/grame-cncm/faust/releases/download/2.59.5-llvm/llvm-17.0.6-win11-x86_64.zip
            libsndfile-url: https://github.com/libsndfile/libsndfile/releases/download/1.2.0/libsndfile-1.2.0-win64.zip

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    
    - uses: ilammy/msvc-dev-cmd@v1

    - name: Download LLVM
      run: |
        # Libfaust will need to link against LLVM.
        # We download a Windows x86_64 LLVM build that we've built in advance.
        curl -L ${{ matrix.llvm-url }} -o llvm.zip
        7z x llvm.zip -y

    - name: Download Libsndfile
      run: |
        curl -L ${{ matrix.libsndfile-url }} -o libsndfile.zip
        7z x libsndfile.zip -y
        mv libsndfile-1.2.0-win64 libsndfile

    # todo: remove windows/libmicrohttpd from repo and use dynamically downloaded version
    # - name: Download libmicrohttpd
    #   run: |
    #     curl -L https://ftpmirror.gnu.org/libmicrohttpd/libmicrohttpd-latest-w32-bin.zip -o libmicrohttpd.zip
    #     7z x libmicrohttpd.zip -y

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      env:
        LLVM_PACKAGE_VERSION: 17.0.6
      
    - name: Build libfaust
      shell: cmd
      run: |
        cd build
        call MakeRelease.bat
      env:
        LLVM_PACKAGE_VERSION: 17.0.6

  build-macos:
    if: ${{ inputs.do-build-macos }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: x64
            os: macos-12
            llvm-url: https://github.com/grame-cncm/faust/releases/download/2.59.5-llvm/llvm-15.0.7-macos10.15-x86_64.zip
            ARCHS: "-arch x86_64"
            CMAKE_OSX_ARCHITECTURES: x86_64
            HOST: x86_64-apple-darwin
            ENABLE_MPEG: ON

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Build libmicrohttpd
      run: |
        curl -L https://mirrors.sarata.com/gnu/libmicrohttpd/libmicrohttpd-0.9.76.tar.gz -o libmicrohttpd-0.9.76.tar.gz
        tar -xvf libmicrohttpd-0.9.76.tar.gz
        mv libmicrohttpd-0.9.76 libmicrohttpd
        cd libmicrohttpd
        export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
        export TARGET=${{matrix.HOST}}
        export CC=$(xcrun -find -sdk macosx gcc)
        export CFLAGS="${{matrix.ARCHS}} -target $TARGET -isysroot $SDKROOT"
        export LDFLAGS="${{matrix.ARCHS}} -target $TARGET -isysroot $SDKROOT"
        ./configure --enable-https=no --host=$TARGET --prefix=$PWD/libmicrohttpd
        make && make install

    # - name: Brew install requirements (arm64)
    #   if: ${{ endsWith( matrix.name, 'arm64') }}
    #   # todo: should we bother with brew update?
    #   # todo: add mpg123 so that faustgen and other projects can decode mp3
    #   run: |
    #     brew update
    #     PACKAGES=(ncurses gtk+ liblo lame flac libogg libtool libvorbis opus)
    #     DEPS=($(brew deps --union --topological $(echo $PACKAGES) | tr '\n' ' '))
    #     PACKAGES=("${DEPS[@]}" "${PACKAGES[@]}")
    #     export HOMEBREW_NO_INSTALL_CLEANUP=1
    #     export HOMEBREW_NO_INSTALL_UPGRADE=1
    #     export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
    #     for PACKAGE in "${PACKAGES[@]}"
    #     do
    #       echo "Fetching bottle: $PACKAGE"
    #       response=$(brew fetch --bottle-tag=arm64_monterey $PACKAGE 2>&1)
    #       package_path=$(echo $response | sed -n 's/.*\:\ \(.*\.tar\.gz\).*/\1/p')
    #       package_path=$(echo "$package_path" | xargs)
    #       echo "Package Path: $package_path"
    #       brew reinstall --verbose --force-bottle "$package_path" || true
    #     done
    # 
    #     brew uninstall --ignore-dependencies curl git || true

    - name: Brew install requirements (x64)
      if: ${{ endsWith( matrix.name, 'x64') }}
      run: brew install pkg-config ncurses gtk+ liblo lame flac libogg libtool libvorbis opus mpg123

    # - name: Install Qt
    #   uses: jurplel/install-qt-action@v3
    #   with:
    #     version: '5.15.2'
    #     host: 'mac'
    #     target: 'desktop'
    #     dir: '${{ github.workspace }}/qt_install'
        # tools: 'tools_ifw tools_qtcreator,qt.tools.qtcreator'

    - name: Download LLVM
      run: |
        # Libfaust will need to link against LLVM.
        # Since we're using an x86_64 GitHub actions runner, we're unable to build arm64 LLVM on-demand.
        # To get around this, we download a compatible LLVM build that we've built in advance.
        curl -L ${{ matrix.llvm-url }} -o llvm.zip
        unzip -o llvm.zip

    - name: Clone Libsndfile
      uses: actions/checkout@v4
      with:
        repository: libsndfile/libsndfile
        path: libsndfile
        submodules: true

    - name: Build libsndfile
      # Note that can't use the libsndfile from brew because it lacks libsndfile.a, the static lib.
      run: |
        brew uninstall --ignore-dependencies libsndfile || true
        cd libsndfile
        LIBSNDFILE_INSTALL_PREFIX="$PWD/install"
        mkdir CMakeBuild && cd CMakeBuild
        cmake .. -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$LIBSNDFILE_INSTALL_PREFIX" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_OSX_ARCHITECTURES=$CMAKE_OSX_ARCHITECTURES -DCMAKE_OSX_DEPLOYMENT_TARGET=$CMAKE_OSX_DEPLOYMENT_TARGET -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=OFF -DBUILD_TESTING=OFF -DENABLE_MPEG=${{ matrix.ENABLE_MPEG }}
        make && make install
        otool -L $LIBSNDFILE_INSTALL_PREFIX/lib/libsndfile.a
        echo "Testing pkg-config for sndfile"
        export PKG_CONFIG_PATH="$LIBSNDFILE_INSTALL_PREFIX/lib/pkgconfig"
        pkg-config --cflags sndfile
      env:
        CMAKE_OSX_ARCHITECTURES: ${{matrix.CMAKE_OSX_ARCHITECTURES}}

    # - name: Clone MAX SDK
    #   uses: actions/checkout@v4
    #   with:
    #     repository: Cycling74/max-sdk-base
    #     path: max-sdk-base

    # - name: Clone faustlive
    #   uses: actions/checkout@v4
    #   with:
    #     repository: grame-cncm/faustlive
    #     path: faustlive
      
    - name: Build everything
      # todo: do we need to specify the qt@5 path for PKG_CONFIG_PATH?
      run: |
        export PKG_CONFIG_PATH="$PWD/libsndfile/install/lib/pkgconfig:$PWD/libmicrohttpd/libmicrohttpd/lib/pkgconfig"
        export LLVM_DIR=$PWD/llvm/lib/cmake/llvm
        export LLVM_LIB_DIR=$PWD/llvm/lib
        export LLVM_INCLUDE_DIRS=$PWD/llvm/include
        export LLVM_LIBS=$(ls $LLVM_LIB_DIR/lib*.a | sed "s|$LLVM_LIB_DIR/lib\(.*\)\.a|-l\1|g" | tr '\n' ' ')
        export LLVM_LIBS="-lm -lcurses -lxml2 $LLVM_LIBS"
        export LLVM_LIBS="$(echo "$LLVM_LIBS" | sed 's/[[:space:]]*$//')"
        export LLVM_DEFINITIONS="-D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS"
        export LLVM_LD_FLAGS="-L$LLVM_LIB_DIR -Wl,-search_paths_first -Wl,-headerpad_max_install_names"
        export LLVM="$LLVM_LD_FLAGS $LLVM_LIBS"
        export FAUSTLIVE=$PWD/faustlive
        export BUILD_HTTP_STATIC=ON
        export USE_STATIC_SNDFILE=1
        export CMAKEOPT="-DCMAKE_OSX_ARCHITECTURES="$CMAKE_OSX_ARCHITECTURES" -DCMAKE_OSX_DEPLOYMENT_TARGET=$CMAKE_OSX_DEPLOYMENT_TARGET -DCMAKE_BUILD_TYPE=Release"
        export INCLUDE_LLVM=ON
        export USE_LLVM_CONFIG=off
        export LLVM_PACKAGE_VERSION="15.0.7"

        cd build

        cmake -C backends/mfx.cmake -C targets/all.cmake \
          ${CMAKEOPT} -DINCLUDE_LLVM=${INCLUDE_LLVM} -DUSE_LLVM_CONFIG=${USE_LLVM_CONFIG} \
          -DLLVM_PACKAGE_VERSION=${LLVM_PACKAGE_VERSION} -DLLVM_LIBS="${LLVM_LIBS}" \
          -DLLVM_LIB_DIR="${LLVM_LIB_DIR}" -DLLVM_INCLUDE_DIRS="${LLVM_INCLUDE_DIRS}" \
          -DLLVM_DEFINITIONS="${LLVM_DEFINITIONS}" -DLLVM_LD_FLAGS="${LLVM_LD_FLAGS}" \
          -DBUILD_HTTP_STATIC=${BUILD_HTTP_STATIC} -DCMAKE_INSTALL_PREFIX=pfx \
          -Bfaustdir .
        cmake --build faustdir --parallel 4 --verbose --target install

      env:
        CMAKE_OSX_ARCHITECTURES: ${{matrix.CMAKE_OSX_ARCHITECTURES}}
        ARCHS: ${{matrix.ARCHS}}

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      
    - name: Upload Faust artifact
      uses: actions/upload-artifact@v4
      with:
        name: pfx
        path: build/pfx/
        # if-no-files-found: error

    # - name: Upload Faust source artifact
    #   if: ${{ endsWith( matrix.name, 'arm64') }}
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: faust-${{env.FAUST_VERSION}}.tar.gz
    #     path: build/Release-${{env.FAUST_VERSION}}/faust-${{env.FAUST_VERSION}}.tar.gz
    #     if-no-files-found: error
    # 
    # - name: Upload faustgen~ artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: faustgen-${{env.FAUSTGEN_VERSION}}-${{ matrix.name }}.dmg
    #     path: build/Release-${{env.FAUST_VERSION}}/faustgen-${{env.FAUSTGEN_VERSION}}-${{matrix.name}}.dmg
    #     if-no-files-found: error

